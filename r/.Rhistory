high<-function(x)
{
return (x[order(x[2], decreasing = TRUE)[sort(unique(x[2]))], , drop = FALSE])
}
k<-high(z[1:2])
high<-function(x)
{
return (x[order(x, decreasing=TRUE)[1:3],,drop=FALSE])
}
k<-high(z[1:2])
high<-function(x)
{
return (x[order(x[2], decreasing=TRUE)[1:3],,drop=FALSE])
}
k<-high(z[1:2])
high<-function(x)
{
return (x[order(x[2], decreasing = TRUE)[sort(unique(x[2]))], , drop = FALSE])
}
k<-high(z[1:2])
high<-function(x)
{
return (x[order(x[2], decreasing = TRUE)[sort(unique(x[2]))], , drop = FALSE])
}
k<-(z[1:2])
high<-function(x)
{
return (x[order(x[2], decreasing = TRUE)[sort(unique(x[2]))], , drop = FALSE])
}
k<-high(z[c(1,2)])
k<-(z[c(1,2)])
View(z)
z<-as.data.frame.matrix(t(z))
high<-function(x)
{
return (x[order(x[2], decreasing = TRUE)[sort(unique(x[2]))], , drop = FALSE])
}
k<-(z[c(1,2)])
View(k)
high<-function(x)
{
return (x[order(x, decreasing = TRUE)[sort(unique(x))], , drop = FALSE])
}
k<-high(z[c(1)])
high<-function(x)
{
return (x[order(x, decreasing = TRUE)[sort(unique(x))], , drop = FALSE])
}
k<-high(z[1])
high<-function(x)
{
return (order(x, decreasing = TRUE)[sort(unique(x))])
}
k<-high(z[1])
high<-function(x)
{
return (order(x, decreasing = TRUE)[1:3])
}
k<-high(z[1])
high<-function(x)
{
return (order(x, decreasing = TRUE)[1:3])
}
k<-high(z[2])
high<-function(x)
{
return (order(x, decreasing = TRUE)[1:3])
}
y1<-sapply(z,high)
View(y1)
z<-temp%>%group_by(dec)%>%summarise_all(sum)
z<-as.data.frame.matrix(t(z))
View(z)
z<-temp%>%group_by(dec)%>%summarise_all(sum)
z<-as.data.frame.matrix(t(z))
high<-function(x)
{
return (order(x, decreasing = TRUE)[1:3])
}
y1<-z[sapply(z,high)]
y1<-z[1][sapply(z,high)]
z<-temp%>%group_by(dec)%>%summarise_all(sum)
z<-as.data.frame.matrix(t(z))
high<-function(x)
{
return (order(x, decreasing = TRUE)[1:3])
}
y1<-sapply(z,high)
z<-temp%>%group_by(dec)%>%summarise_all(sum)
z<-as.data.frame.matrix(t(z))
high<-function(x)
{
return (order(x, decreasing = TRUE)[1:3])
}
ok<-function(x)
{
return(z[1][x])
}
y1<-sapply(z,high)
y1<-sapply(y1,ok)
#q5
library(readr)
library(mltools)
u<-read_delim("imdb.csv", delim=',', escape_double=FALSE, escape_backslash=TRUE)
u$duration[is.na(u$duration)]<-0
u$dec<-as.numeric(ntile(u$duration, 10))
df4<-u%>%group_by(dec)%>%summarise(no_of_nomi=sum(nrOfNominations),no_of_wins=sum(nrOfWins))
df4['count']<-data.frame(table(u$dec))['Freq']
temp<-u[c(17:45)]
z<-temp%>%group_by(dec)%>%summarise_all(sum)
z<-as.data.frame.matrix(t(z))
high<-function(x)
{
return (order(x, decreasing = TRUE)[1:3])
}
ok<-function(x)
{
return(z[1][x])
}
z[1]
y1<-sapply(z,high)
y1<-sapply(y1,ok)
z<-temp%>%group_by(dec)%>%summarise_all(sum)
z<-as.data.frame.matrix(t(z))
high<-function(x)
{
return (z[order(x, decreasing = TRUE)[1:3]])
}
y1<-sapply(z,high)
names<-row.names(z)
high<-function(x)
{
return (names[order(x, decreasing = TRUE)[1:3]])
}
y1<-sapply(z,high)
View(y1)
#q5
library(readr)
library(mltools)
u<-read_delim("imdb.csv", delim=',', escape_double=FALSE, escape_backslash=TRUE)
u$duration[is.na(u$duration)]<-0
u$dec<-as.numeric(ntile(u$duration, 10))
df4<-u%>%group_by(dec)%>%summarise(no_of_nomi=sum(nrOfNominations),no_of_wins=sum(nrOfWins))
df4['count']<-data.frame(table(u$dec))['Freq']
temp<-u[c(17:45)]
z<-temp%>%group_by(dec)%>%summarise_all(sum)
z<-as.data.frame.matrix(t(z))
names<-row.names(z)
high<-function(x)
{
return (names[order(x, decreasing = TRUE)[1:3]])
}
y1<-t(sapply(z,high))
View(y1)
#q5
library(readr)
library(mltools)
u<-read_delim("imdb.csv", delim=',', escape_double=FALSE, escape_backslash=TRUE)
u$duration[is.na(u$duration)]<-0
u$dec<-as.numeric(ntile(u$duration, 10))
df4<-u%>%group_by(dec)%>%summarise(no_of_nomi=sum(nrOfNominations),no_of_wins=sum(nrOfWins))
df4['count']<-data.frame(table(u$dec))['Freq']
temp<-u[c(17:45)]
z<-temp%>%group_by(dec)%>%summarise_all(sum)
z<-as.data.frame.matrix(t(z))
names<-row.names(z)
high<-function(x)
{
return (names[order(x, decreasing = TRUE)[1:3]])
}
y1<-t(sapply(z,high))
df4['top genres']<-y1[1]+','+y1[2]
df4['top genres']<-paste(y1[1],',',y1[2])
View(df4)
#q5
library(readr)
library(mltools)
u<-read_delim("imdb.csv", delim=',', escape_double=FALSE, escape_backslash=TRUE)
u$duration[is.na(u$duration)]<-0
u$dec<-as.numeric(ntile(u$duration, 10))
df4<-u%>%group_by(dec)%>%summarise(no_of_nomi=sum(nrOfNominations),no_of_wins=sum(nrOfWins))
df4['count']<-data.frame(table(u$dec))['Freq']
temp<-u[c(17:45)]
z<-temp%>%group_by(dec)%>%summarise_all(sum)
z<-as.data.frame.matrix(t(z))
names<-row.names(z)
high<-function(x)
{
return (names[order(x, decreasing = TRUE)[1:3]])
}
y1<-as.data.frame.matrix(t(sapply(z,high)))
df4['top genres']<-paste(y1[1],',',y1[2])
View(df4)
View(y1)
df4['top genres']<-y1[1]
View(df4)
#q5
library(readr)
library(mltools)
u<-read_delim("imdb.csv", delim=',', escape_double=FALSE, escape_backslash=TRUE)
u$duration[is.na(u$duration)]<-0
u$dec<-as.numeric(ntile(u$duration, 10))
df4<-u%>%group_by(dec)%>%summarise(no_of_nomi=sum(nrOfNominations),no_of_wins=sum(nrOfWins))
df4['count']<-data.frame(table(u$dec))['Freq']
temp<-u[c(17:45)]
z<-temp%>%group_by(dec)%>%summarise_all(sum)
z<-as.data.frame.matrix(t(z))
names<-row.names(z)
high<-function(x)
{
return (names[order(x, decreasing = TRUE)[1:3]])
}
y1<-as.data.frame.matrix(t(sapply(z,high)))
df4['top genres']<-paste(y1[1],y1[2],y1[3])
View(df4)
df4['top genres']<-paste(V1,',',V2)
y1<-as.data.frame.matrix(t(sapply(z,high)))
colnames(y1)<-c('first','second','third')
View(y1)
df4['top genres']<-paste(y1$first,',',y1$second)
View(df4)
df4
q5(u)
#q5
library(readr)
library(mltools)
u<-read_delim("imdb.csv", delim=',', escape_double=FALSE, escape_backslash=TRUE)
q5<-function(u)
{
u$duration[is.na(u$duration)]<-0
u$dec<-as.numeric(ntile(u$duration, 10))
df4<-u%>%group_by(dec)%>%summarise(no_of_nomi=sum(nrOfNominations),no_of_wins=sum(nrOfWins))
df4['count']<-data.frame(table(u$dec))['Freq']
temp<-u[c(17:45)]
z<-temp%>%group_by(dec)%>%summarise_all(sum)
z<-as.data.frame.matrix(t(z))
names<-row.names(z)
high<-function(x)
{
return (names[order(x, decreasing = TRUE)[1:3]])
}
y1<-as.data.frame.matrix(t(sapply(z,high)))
colnames(y1)<-c('first','second','third')
df4['top genres']<-paste(y1$first,',',y1$second,',',y1$third)
return(df4)
}
q5(u)
library(readr)
library(mltools)
df<-read_delim("imdb.csv", delim=',', escape_double=FALSE, escape_backslash=TRUE)
library(dplyr)
# 7. Get the imdb rating for fifth movie of dataframe
df[['imdbRating']][5]
# 8. Return titles of movies with shortest and longest run time
print('minimum duration')
df$title[which.min(df$duration)]
print('maximum duration')
df$title[which.max(df$duration)]
# 7. Get the imdb rating for fifth movie of dataframe
q7<-function(x)
{
return (df[['imdbRating']][5])
}
q7(5)
# 9. Sort the data frame by in the order of when they where released and have higer ratings, Hint : release_date (earliest) and Imdb rating(highest to lowest)
library(tidyr)
q9<-function(df)
{
df<-df %>% drop_na(year,imdbRating )
df1<-df[order( df[,9],df[,6] ),]
return(df1)
}
head(q9(df))
df<-read_delim("imdb.csv", delim=',', escape_double=FALSE, escape_backslash=TRUE)
# 9. Sort the data frame by in the order of when they where released and have higer ratings, Hint : release_date (earliest) and Imdb rating(highest to lowest)
library(tidyr)
q9<-function(df)
{
df<-df %>% drop_na(year,imdbRating )
df1<-df[order( df[,9],df[,6] ),]
return(df1)
}
head(q9(df))
# 9. Sort the data frame by in the order of when they where released and have higer ratings, Hint : release_date (earliest) and Imdb rating(highest to lowest)
library(tidyr)
df<-df %>% drop_na(year,imdbRating )
#df1<-df[rowSums(is.na(df[ ,c(6,9)])) == 0, ]
df1<-df[order( df[,9],df[,6] ),]
# 9. Sort the data frame by in the order of when they where released and have higer ratings, Hint : release_date (earliest) and Imdb rating(highest to lowest)
library(tidyr)
df<-df %>% drop_na(year,imdbRating )
#df1<-df[rowSums(is.na(df[ ,c(6,9)])) == 0, ]
df1<-df[order( dataframe[,9], dataframe[,6] ),]
# 9. Sort the data frame by in the order of when they where released and have higer ratings, Hint : release_date (earliest) and Imdb rating(highest to lowest)
library(tidyr)
df<-df %>% drop_na(year,imdbRating )
#df1<-df[rowSums(is.na(df[ ,c(6,9)])) == 0, ]
df1<-df[order( df[,9], df[,6] ),]
# 9. Sort the data frame by in the order of when they where released and have higer ratings, Hint : release_date (earliest) and Imdb rating(highest to lowest)
library(tidyr)
df<-df %>% drop_na(year,imdbRating )
#df1<-df[rowSums(is.na(df[ ,c(6,9)])) == 0, ]
df1>df[with(df, order(year,imdbRating)), ]
# 9. Sort the data frame by in the order of when they where released and have higer ratings, Hint : release_date (earliest) and Imdb rating(highest to lowest)
library(tidyr)
df<-df %>% drop_na(year,imdbRating )
#df1<-df[rowSums(is.na(df[ ,c(6,9)])) == 0, ]
df1<-df[with(df, order(year,imdbRating)), ]
head(df1)
# 9. Sort the data frame by in the order of when they where released and have higer ratings, Hint : release_date (earliest) and Imdb rating(highest to lowest)
library(tidyr)
q9<-function(df)
{
df<-df %>% drop_na(year,imdbRating )
df1<-df[with(df, order(year,imdbRating)), ]
return(df1)
}
head(q9(df))
# 10. Subset the dataframe with movies having the following prameters. revenue more than 2 million spent less than 1 million duration between 30 mintues to 180 minutes
q10<-function(df)
{
df$duration <-as.numeric(as.character(df[,'duration']))
df2<-subset(df2,10800>= duration & 1800 <= duration)
return(df2)
}
q10(df)
# 10. Subset the dataframe with movies having the following prameters. revenue more than 2 million spent less than 1 million duration between 30 mintues to 180 minutes
q10<-function(df)
{
df$duration <-as.numeric(as.character(df[,'duration']))
df2<-subset(df,10800>= duration & 1800 <= duration)
return(df2)
}
q10(df)
# 10. Subset the dataframe with movies having the following prameters. revenue more than 2 million spent less than 1 million duration between 30 mintues to 180 minutes
q10<-function(df)
{
df$duration <-as.numeric(as.character(df[,'duration']))
df2<-subset(df,10800>= duration & 1800 <= duration)
return(df2)
}
q10(df)
df<-read_delim("imdb.csv", delim=',', escape_double=FALSE, escape_backslash=TRUE)
# 10. Subset the dataframe with movies having the following prameters. revenue more than 2 million spent less than 1 million duration between 30 mintues to 180 minutes
q10<-function(df)
{
df$duration <-as.numeric(as.character(df[,'duration']))
df2<-subset(df,10800>= duration & 1800 <= duration)
return(df2)
}
q10(df)
# 10. Subset the dataframe with movies having the following prameters. revenue more than 2 million spent less than 1 million duration between 30 mintues to 180 minutes
q10<-function(df)
{
df<-df %>% drop_na(duration )
df$duration <-as.numeric(as.character(df[,'duration']))
df2<-subset(df,10800>= duration & 1800 <= duration)
return(df2)
}
q10(df)
# 10. Subset the dataframe with movies having the following prameters. revenue more than 2 million spent less than 1 million duration between 30 mintues to 180 minutes
q10<-function(df)
{
df<-df %>% drop_na(duration )
df$duration <-as.numeric(as.character(df[,'duration']))
df2<-subset(df,10800>= duration & 1800 <= duration)
return(df2)
}
q10(df)
# 10. Subset the dataframe with movies having the following prameters. revenue more than 2 million spent less than 1 million duration between 30 mintues to 180 minutes
q10<-function(df)
{
df<-df %>% drop_na(duration )
df$duration <-as.numeric(as.character(df[,'duration']))
df2<-subset(df,10800>= duration & 1800 <= duration)
return(df2)
}
q10(df)
# 10. Subset the dataframe with movies having the following prameters. revenue more than 2 million spent less than 1 million duration between 30 mintues to 180 minutes
q10<-function(df)
{
df<-df %>% drop_na(duration )
df$duration <-as.numeric(as.character(df[,'duration']))
return(subset(df,between(duration,30,180)))
}
q10(df)
# 10. Subset the dataframe with movies having the following prameters. revenue more than 2 million spent less than 1 million duration between 30 mintues to 180 minutes
q10<-function(df)
{
df<-df %>% drop_na(duration )
df$duration <-as.numeric(as.character(df[,'duration']))
return(subset(df,between(duration,1800,10800)))
}
q10(df)
# 10. Subset the dataframe with movies having the following prameters. revenue more than 2 million spent less than 1 million duration between 30 mintues to 180 minutes
q10<-function(df)
{
df<-df %>% drop_na(duration )
df$duration <-as.numeric(as.character(df[,'duration']))
print(df)
return(subset(df,between(duration,1800,10800)))
}
q10(df)
# 10. Subset the dataframe with movies having the following prameters. revenue more than 2 million spent less than 1 million duration between 30 mintues to 180 minutes
q10<-function(df)
{
df<-df %>% drop_na(duration )
print(df)
return(subset(df,between(duration,1800,10800)))
}
q10(df)
# 10. Subset the dataframe with movies having the following prameters. revenue more than 2 million spent less than 1 million duration between 30 mintues to 180 minutes
q10<-function(df)
{
df<-df %>% drop_na(duration )
return(subset(df,between(duration,1800,10800)))
}
head(q10(df))
df<-read.csv("diamonds.csv")
library(dplyr)
# 11. Count the duplicate rows of diamonds DataFrame.
q11<-function(df){
return(nrow(df)-nrow(unique(df)))}
q11(df)
#11
q11<-function(df){
df2<-aggregate(list(numdup=rep(1,nrow(df))), df, length)
return(df2)}
q11(df)
# 12. Drop rows in case of missing values in carat and cut columns.
q12<-function(df)
{
df1<-df[complete.cases(df[ , 1:2]),]
return(df1)
}
q12(df)
# 14. Compute volume as (x y z) when depth is greater than 60. In case of depth less than 60 default volume to 8.
q14<-function(df)
{
df4<-df
df4$volume <- ifelse(df4$depth>60,df$x*df$y, 8)
return(df4)
}
q14(df)
# 15. Impute missing price values with mean.
q15<-function(df)
{
df5<-df
df5$price <- ifelse(is.na(df5$price), mean(df5$price, na.rm=TRUE), df5$price)
return(df5)
}
q15(df)
# 13. Subset the dataframe with only numeric columns.
q13<-function(df)
{
df3<-select_if(df, is.numeric)
return(df3)
}
q13(df)
#1. Find the least amount sale that was done for each item.
library(readxl)
install.packages("readxl")
#1. Find the least amount sale that was done for each item.
library(readxl)
df<- read_excel("SaleData.xlsx")
q1<-function(df)
{
return(aggregate(df[,'Sale_amt'], list(df$Item), min))
}
q1(df)
# 2. Compute the total sales for each year and region across all items
df['year']=format(as.Date(df$OrderDate, format="%m/%d/%Y"),"%Y")
aggregate(df[,'Sale_amt'], list(df$year,df$Region,df$Item), sum)
# 2. Compute the total sales for each year and region across all items
q2<-function(df)
{
df['year']=format(as.Date(df$OrderDate, format="%m/%d/%Y"),"%Y")
return(aggregate(df[,'Sale_amt'], list(df$year,df$Region,df$Item), sum))
}
q2(df)
# 3. Create new column 'days_diff' with number of days difference between reference date passed and each order date
q3<-function(df,refdat)
{
df$days_diff <-as.Date(refdat,'%m-%d-%Y')
df$days_diff<- difftime(df$days_diff ,df$OrderDate , units = c("days"))
return(df)
}
q3(df,'01-05-2020')
# 5. For all regions find number of salesman and total sales. Return as a dataframe with three columns Region, salesmen_count and total_sale
q5<-function(df)
{
df5<-aggregate(df['Sale_amt'], list(df$Region), sum)
colnames(df5)[1]<-'Region'
colnames(df5)[2]<-'total_sale'
df1<-aggregate(df['SalesMan'], list(df$Region), list)
df5['Salesman_count']<-c(1,1,1)
for(i in 1:3) {
df5[i,3]<-length(unique(unlist(df1[i,2])))}
return(df5)
}
q5(df)
# 6. Create a dataframe with total sales as percentage for each manager. Dataframe to contain manager and percent_sales
q6<-function(df)
{
df6<-aggregate(df['Sale_amt'], list(df$Manager), sum)
s<-sum(df$Sale_amt)
df6['percent_sales']<-(df6['Sale_amt']/s)*100
df6$Sale_amt<-NULL
colnames(df6)[1]<-"manager"
return(df6)
}
q6(df)
